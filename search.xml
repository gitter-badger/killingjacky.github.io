<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Work around for macOS Mail.app eating high CPU]]></title>
    <url>%2F2017%2F03%2F09%2Fwork-around-for-macos-mail-app-eating-high-cpu%2F</url>
    <content type="text"><![CDATA[The work around is based on a software named monit. Let’s see what monit do. Monit is a small Open Source utility for managing and monitoring Unix systems. Monit conducts automatic maintenance and repair and can execute meaningful causal actions in error situations. Step-by-stepI. Install monit Download monit here for 64bits macOS https://mmonit.com/monit/dist/binary/5.21.0/monit-5.21.0-macos-x64.tar.gz Extract the archive, you will get file like this: Copy files into their locations sudo cp -f bin/monit /usr/local/bin sudo chmod a+x /usr/local/bin/monit sudo cp -f conf/monitrc /usr/loca/etc sudo cp -rf man/man1/monit.1 /usr/local/share/man/man1 Test your installation monit --version II. Configure monit Add the following lines into /usr/loca/etc/monitrc 123456check process Mail matching "/Applications/Mail.app/Contents/MacOS/Mail" start program = "/usr/bin/open -a /Applications/Mail.app" stop program = "/usr/bin/pkill -9 Mail" if cpu &gt; 80% for 2 cycles then alert if cpu &gt; 100% for 2 cycles then restart III. Configure the startup script for LaunchDaemonLaunchDaemon is the startup manager for macOS, and the startup items for LaunchDaemon can be started when system boot up before user login. It’s system level. sudo vim /Library/LaunchDaemons/com.tildeslash.monit.plist Parse the following lines into that plist file 12345678910111213141516&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;&lt;plist version="1.0"&gt;&lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;com.tildeslash.monit&lt;/string&gt; &lt;key&gt;ProcessType&lt;/key&gt; &lt;string&gt;Adaptive&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;key&gt;LaunchOnlyOnce&lt;/key&gt; &lt;false/&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;/usr/local/bin/monit&lt;/string&gt; &lt;string&gt;-I&lt;/string&gt; &lt;/array&gt;&lt;/dict&gt;&lt;/plist&gt; Now load monit sudo launchctl load -w /Library/LaunchDaemons/com.tildeslash.monit.plist Final test The monit daemon should be running now, test its status using command: sudo monit status, if everything was done right, you should see the diagnosis information of the Mail process. Besides, monit serves a http server at address http://localhost:2812 IV. Sum upThe basic idea of this workaround is to monitor the CPU usage of process Mail, if it’s eating over 100% CPU for more than 1 minute, monit will restart it. Monit will check the status of Mail every 30 seconds (the default configuration), and it prints logs into the system log, you can access the log with system applicaton Console/控制台, e.g. To investigate if your Mail.app lose its mind for the last few days, open Console application and search monit. If any entry out there, bla bla 1000 words for the excellent Mail.app!!! Also, you can check the uptime of Mail.app in the web page of monit with default user/password - admin/monit.]]></content>
      <tags>
        <tag>tech</tag>
        <tag>mac</tag>
        <tag>Mail.app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DIY an iRobot Roomba Compatible Virtual Wall]]></title>
    <url>%2F2016%2F11%2F25%2Fdiy-an-irobot-roomba-virtual-wall%2F</url>
    <content type="text"><![CDATA[I need more virtual walls for my iRobot Roomba 650, and I find that it’s not too complicated to make that. So I did some electronic monitoring and software tinkering, then I successfully made several ones - working good. The IR protocolHere’s my research, maybe different from some old discussions (maybe they’re for series 4000 or newer 5), but this protocol is proved to be working for 650. Let’s struct the IR signal from small to big. The smallest unit is a 38KHz PWM with 50% duty Then the PWM continues for 500us, call this A Then A * 3, period 8ms, call this 3 pulses B Then B repeats every 150ms… The hardware stm32L011 - Ultra low power MCU ETA6003 - battery charging ETA3410 - battery voltage to 3.3V regular TSAL6200 - emitter Battery 1000mAh Avg current consumption is around 1mA, the battery is expected to power this little device for 1 month at least. The softwareNot open source😜 The enclosure3D printed, have no time to laser cut a cover… Images and video]]></content>
      <tags>
        <tag>tech</tag>
        <tag>irobot</tag>
        <tag>roomba</tag>
        <tag>virtual wall</tag>
        <tag>irobot create</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SyncY in Synology NAS | 在群晖中使用SyncY同步百度云]]></title>
    <url>%2F2016%2F11%2F25%2Fsyncy-in-synology-nas%2F</url>
    <content type="text"><![CDATA[1 安装Docker套件套件中心安装，略。 2 下载syncy镜像找开Docker套件，注册表中搜索syncy，得到结果 chiunownow/syncy ，双击下载。如果报错，请转入命令行下载，ssh登入后运行 docker pull chiunownow/syncy 网速慢的得等待一会儿了（其实是很久很久很久。。。） 什么？不知道怎么登入ssh？请看下一步 3 使能ssh并登入控制面板 -&gt; 终端机和SNMP -&gt; 勾选启动SSH功能 使用自己熟悉的终端登入ssh（比如windows下的putty，mac/linux下的terminal，太基础不会的自己度娘谷狗吧） ssh root@your-nas-address 密码为初建管理员密码。 4 Syncy配置以下都是在ssh中。 docker run --name sss -it chiunownow/syncy /bin/bash 现在进入了容器命令行，运行 /usr/bin/syncy.py 会得到这样的打印 1234567Device binding Guide: 1. Open web browser to visit:&quot;https://openapi.baidu.com/device&quot; and input user code to binding your baidu account. 2. User code: xxxxxx (User code valid for 30 minutes.) 3. After granting access to the application, come back here and press [Enter] to continue. 一通复制粘贴点击下一步。。。。。最后ctrl+C结束。 这时完成的事情是拿到了百度云的token，同时写入了配置文件/etc/config/syncy 我们要把这个配置文件搞出来 cat /etc/config/syncy 复制。然后退出docker exit 在DSM系统中找一个位置存放配置文件， mkdir -p /volume1/docker/syncy cd /volume1/docker/syncy cat &gt; syncy-photo 粘贴，ctrl+d保存。 这个默认的配置会把文件同步到百度云的“我的应用数据/SyncY/Syncy-docker目录下，如果想同步到另外的目录，或SyncY多开，可以找到option remotepath &#39;/Syncy-docker&#39;修改成想要的目录名。 最后删除临时容器 docker rm sss 告别命令行回到DSM的图形界面。 5 创建Syncy容器打开Docker套件，在”映像“中选择”chiunownow/syncy“，”启动”，”通过向导启动” 容器名称 下一步，高级设置，卷，添加文件 添加文件夹 注意红框内的装载路径必须这样填 FIX: /etc/config/syncy 只读属性去掉 “环境”，执行命令，sh /usr/bin/syncyd.sh 最后是这样子的 启动容器 成功运行 ！！注意！！默认的配置是1小时同步一次，这种慢扫适合同步照片等不紧急备份任务，或文件数量巨大的目录(云与本地目录的比对成本很高)，想要立即同步，可重启容器。 可自行修改配置文件中的syncinterval提高同步扫描频率，比如从百度云推送文件回NAS，可设1分钟或更小，但切记文件数不要太多，这种快扫会消耗较多的CPU资源。 另外，syncy原作者针对配置项写了详尽文档，http://www.syncy.cn/index.php/syncyconfighelp/ ， 懂的自己折腾吧 6 多开/同步多个目录重复4，5步 😎 配置项解释12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# synctype:[0-4]# [0,upload]:只检查本地文件并上传修改过的文件，忽略远端的所有修改或删除，远端删除的也不再上传# [1,upload+]:远端是本地的完全镜像，忽略远端的修改，远端删除的文件在下一次同步时将上传，远端新增的文件如果本地不存在，将不做任何变化# [2,download]:只检查远端文件是否修改，如有修改下载到本地，忽略本地的修改；如本地文件被删除，将不再下载# [3,download+]:检查远端和本地文件，如远端有修改，下载到本地，忽略本地的修改；如本地有文件被删除，将重新下载# [4,sync]:同时检查远端和本地文件，如只有远端被修改，则下载到本地；如只有本地修改，则上传到远端；如本地和远端都被修改，则以冲突设置方式为准。# 0-3模式下，目的端自主新增的文件不会被删除# 4模式下，当远端目录更改后，请删除本地同步根目录下的.syncy.info.db文件，否则在下次同步时将会删除本地的所有文件（系统会认为远程文件不需要被用户删除，也会删除本地的相应文件）syncyerrlog=”# 错误日志文件（包含路径名），为空时将输出至错误输出（默认屏幕）# 设置值必须是指向文件，文件可以不存在（不存在时程序自动创建），父目录必须存在，不能指向已存在的目录# 例：/mnt/sda1/log/syncyerr.logsyncylog=”# 运行日志文件（包含路径名），为空时将输出至标准输出（默认屏幕）# 设置值必须是指向文件，文件可以不存在（不存在时程序自动创建），父目录必须存在，不能指向已存在的目录# 例：/mnt/sda1/log/syncy.logblocksize=’10’# 分片上传块大小# 默认值为 10 (10M)# 单位 M，此大小决定了能上传的最大文件大小（文件最大大小 = blocksize * 1024）# 分片大小必须大于等于1（1M）ondup=’rename’# 重名处理方式# 默认值为 ‘rename’# [rename or overwrite]# 存在重名文件时是覆盖同名文件，还是重命名文件# 当同步模式为0，重命名新文件，命名规则为“文件名_日期.后缀”# 同步模式为1和2时，将重命名旧文件，命名规则为“文件名_old_日期.后缀”# 同步模式为3时，则ondup只能为overwrite，设置成rename将不生效datacache=’on’# 是否开启缓存# 默认值为 ‘on’# 同步信息数据缓存，启用有助于提高同步速度# 请根据你路由内存的大小来决定是否开启excludefiles=’*/Thumbs.db’# 排除文件或文件夹，将会同时应用于本地和远端，请合理设置此值，过多的排除选项将会降低系统的处理速度# 有多个排除项时用分号(;)隔开# 例：’*/Thumbs.db;*/excludefilename.*’# 默认排除以“.tmp.syy”结尾的文件，此类型文件用于记录分片上传或断点下载信息，上传或下载完成后将自动删除，如原文件被手动修改，建议同时删除此文件# 只支持通配符*? (*代表零个或更多个任意字符，?代表零个或一个字符)listnumber=’100′# 每次检查获取远程的文件数# 默认值为 100# 同步时每次获取的远端文件列表数量，数量过大时返回的字符串长度很大，将占用更多的内存# 路径长度较长时也应适当缩小此值retrytimes=’3′#失败重试次数（发生错误时的重试次数）# 默认值 3 次retrydelay=’3′# 重试延时时间（秒）# 默认值为 3 秒maxsendspeed=’0′# 最大上传速度（字节/秒）# 默认值为 0(不限速)maxrecvspeed=’0′# 最大下载速度（字节/秒）# 默认值为 0(不限速)syncperiod=’0-24′# 运行时间段# 默认值为 ‘0-24′# 运行时间段（小时）# 判断规则为[0,24)即包含设定的开始时间截止于设定的结束时间# 如想从零点至6点之间才允许运行，应设置为’0-6’，如24小时都运行，则设置为’0-24’# 如果当前时间不在设定范围内，将每5分钟检查一次，如果设为空，则只运行一次后退出syncinterval=’3600′# 同步间隔时间# 默认值为 3600(1小时)# 每次同步完成之后与下一次开始同步的间隔时间# 单位：秒]]></content>
      <tags>
        <tag>tech</tag>
        <tag>SyncY</tag>
        <tag>NAS</tag>
        <tag>docker</tag>
        <tag>百度云</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Use Slack App to Issue Thunder Remote Download Task]]></title>
    <url>%2F2016%2F11%2F25%2Fslack-thunder%2F</url>
    <content type="text"><![CDATA[This article involves a product within China - Thunder Remote Download. So will be in Chinese. 使用Slack下达迅雷远程下载指令简介这是一个用slack聊天界面下达迅雷远程下载指令的程序。 部署准备 一台能够连接迅雷服务器和slack服务器的机器，例如：NAS，VPS。能运行Python的路由也行。 docker环境准备。本文将介绍以docker方式部署，裸机安装方式自行研究。 迅雷帐号。 slack帐号以及App token. 个人用户获得token最简单的方法是生成test token， 前往此处生成https://api.slack.com/docs/oauth-test-tokens 部署 docker pull killingjacky/slackthunder 准备宿主机目录和配置文件mkdir slackthundercd slackthunderwget -O config.py https://raw.githubusercontent.com/KillingJacky/SlackThunder/master/config.default.py# edit config.pymkdir vcode docker run –name slackthunder -v `pwd`/config.py:/app/config.py:ro -v `pwd`/vcode:/app/vcode –env SLACK_TOKEN=’your-token-here’ -d killingjacky/slackthunder docker logs -f slackthunder 确认迅雷登陆成功（有时需要填写验证码），确认slack connected（有时会连不上）。 使用命令行进入相应的channel，默认配置为#thunder： login logout listdev - list the downloader devices select {index} - select the downloader adddir {dir} - add a download target dir listdir - list all the saved target dirs rmdir {dir} - remove a preset download target dir cleardir - clear all the saved target dirs {url} - download into the default target dir (configured on yc.xunlei.com) {url} {index} - download into the index selected target dir info or list - list the downloading status listfini - list the finished tasks (recent 10) rmtask {index} - stop the index selected task and trash it ping - test if the slack script is working 手机App以iOS为例，在safari中长按链接（磁力链，普通下载链等）-&gt; 分享 -&gt; 选择Slack -&gt; 选择相应的channel -&gt; 发送。这也是我写这个小程序的最初需求出发点（迅雷远程网站无手机版，复制粘贴链接非常麻烦）。 协议/声明本程序迅雷远程协议参考https://github.com/iambus/xunlei-lixian 鸣谢，并跟随MIT协议。 Github: https://github.com/KillingJacky/SlackThunder 若某公司认为我不应公开其API（抓包所得），请联系我。]]></content>
      <tags>
        <tag>tech</tag>
        <tag>slack</tag>
        <tag>thunder api</tag>
        <tag>迅雷远程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Arm the Xiaomi R1D router into a NAS,Remote Downloader,BaiduCloud Syncer]]></title>
    <url>%2F2016%2F01%2F04%2Fxiaomi-router-as-nas%2F</url>
    <content type="text"><![CDATA[Xiaomi R1D router is a high performance Broadcom BCM4709 based router with builtin 1TB SATA HDD storage. The hardware of it is really royal except the software. After a painful struggle on the stock firmware of R1D, I decide to give up the kitchen sicker stock firmware. The stuff we can play with R1D are: Flash the Tomato firmware (alternative advanced tomato with better UI) Builtin NAS support of tomato with services: USB storage, FTP, samba, DLNA Remote access with DDNS support Remote offline downloader - Xware downloader from thunder (迅雷) Sync files with Baidu cloud storage - syncy.py And the released opkg capability of openwrt system for unlimited hacking The guide can be easily searched with google. Now I’m very satisfied with the advanced tomato system, thanks to the developers of tomato and advanced tomato system!]]></content>
      <tags>
        <tag>tech</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pitch: enable Pebble Time geo ablility getting rid of a phone]]></title>
    <url>%2F2015%2F08%2F17%2Fpebble-geo%2F</url>
    <content type="text"><![CDATA[Pebble is the most popular smart watch with a strong ability in battery life and expanding its functionality. To gain good battery life, it was designed to have no onboard/native GPS device. People must have their phone carried along to enable it using geo information. But what if people just dont wanna carry the heavy phone when they run? Or what if have no pocket to put the phone in when they do cycling? Now Pebble Time brings us a new possibility to super extend its functionality - the smartstrap interface. With this interface, we have designed some gadgets to connect Xadow with pebble. With Xadow, pebble pluses the wings of more sensors and wearable modules and is unlocked the limitation of the box. Tinkers and makers will have their unique Pebble+ with some interesting hacking. That will be fun. Let’s have a pitch :D Geo information with Xadow-GPS: (please forget about the wires and the clip :D ) The smartstrap main board is also open for programming. After a few steps of workaround (soldering 4 wires to the SWD interface or the USB interface), one can program it with mbed libraries. That’s easy enough. And with the communication protocol in pebble SDK, pebble app designers can easily read the sensors like this: 1234567891011121314151617181920212223242526272829static void extract_data_from_stream(uint8_t req, uint8_t *buff, int len)&#123; switch(req) &#123; case GET_VBAT: &#123; if (len &gt;= 4) memcpy(&amp;vbat, buff, 4); break; &#125; case GET_GPS: &#123; if(len &gt;= 18) &#123; memcpy(&amp;lat, buff, 4); buff+=4; memcpy(&amp;lon, buff, 4); buff+=4; memcpy(&amp;velocity, buff, 4); buff+=4; memcpy(&amp;alt, buff, 4); buff+=4; memcpy(&amp;fix, buff, 1); buff+=1; memcpy(&amp;sat, buff, 1); &#125; break; &#125; ... default: break; &#125;&#125; That’s where we get now. How do you think? Always prefer feedbacks and 吐槽s. Click here to view the project’s landing page.]]></content>
      <tags>
        <tag>tech</tag>
        <tag>pebble</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Automatic sun shade for home]]></title>
    <url>%2F2015%2F08%2F14%2FAutomatic-sun-shade-for-home%2F</url>
    <content type="text"><![CDATA[This is a kind of motor driven sun shade, DIYed for the sun shine block for the balcony of my home, controlled by IR remote. There’re some kind of sun shade controller in the market, but they are expensive and take too much space of home. So what I made is a cheap and home-brew sun shade driver and controller with most of the materials handy to get. For details, please move on to seeedstudio’s recipe site. I just posted it there: http://www.seeedstudio.com/recipe/183-automatic-sun-shade-for-home.html]]></content>
      <tags>
        <tag>tech</tag>
      </tags>
  </entry>
</search>
